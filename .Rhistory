break
}
H<- (NSim/sum(NSim))*(-log(NSim/sum(NSim)))
H<- sum(H, na.rm=T) #Shannon Wiener Diversity Index
}
Hdist
NSim <- rand.neutral(J, Theta, string="spp.")
s <- length(NSim)
s!=S
H<- (NSim/sum(NSim))*(-log(NSim/sum(NSim)))
H<- sum(H, na.rm=T) #Shannon Wiener Diversity Index
Hdist<-repeat{
NSim <- rand.neutral(J, Theta, string="spp.")
s <- length(NSim)
if (s!=S) {
break
}
H<- (NSim/sum(NSim))*(-log(NSim/sum(NSim)))
sum(H, na.rm=T) #Shannon Wiener Diversity Index
}
Hdist
Hdist<-repeat{
NSim <- rand.neutral(J, Theta, string="spp.")
s <- length(NSim)
if (s!=S) {
break
}
H<- (NSim/sum(NSim))*(-log(NSim/sum(NSim)))
sum(H, na.rm=T) #Shannon Wiener Diversity Index
}
}
Hdist
Hdist<-repeat{
NSim <- rand.neutral(J, Theta, string="spp.")
H<- (NSim/sum(NSim))*(-log(NSim/sum(NSim)))
sum(H, na.rm=T) #Shannon Wiener Diversity Index
s <- length(NSim)
if (s!=S) {
break
}
}
Hdist
Hdist<-
repeat{
sum(H, na.rm=T) #Shannon Wiener Diversity Index
NSim <- rand.neutral(J, Theta, string="spp.")
H<- (NSim/sum(NSim))*(-log(NSim/sum(NSim)))
s <- length(NSim)
if (s!=S) {
break
}
}
Hidst
Hdist
NSim <- rand.neutral(J, Theta, string="spp.")
Nsim
NSim
H<- (NSim/sum(NSim))*(-log(NSim/sum(NSim)))
s <- length(NSim)
Hdist<-
repeat{
print(sum(H, na.rm=T)) #Shannon Wiener Diversity Index
NSim <- rand.neutral(J, Theta, string="spp.")
H<- (NSim/sum(NSim))*(-log(NSim/sum(NSim)))
s <- length(NSim)
if (s!=S) {
break
}
}
repeat{
a <- (sum(H, na.rm=T)) #Shannon Wiener Diversity Index
NSim <- rand.neutral(J, Theta, string="spp.")
H<- (NSim/sum(NSim))*(-log(NSim/sum(NSim)))
s <- length(NSim)
if (s!=S) {
break
}
}
a
repeat{
a <- (sum(H, na.rm=T)) #Shannon Wiener Diversity Index
NSim <- rand.neutral(J, Theta, string="spp.")
H<- (NSim/sum(NSim))*(-log(NSim/sum(NSim)))
s <- length(NSim)
print(s)
if (s!=S) {
break
}
}
a <- c(s, (sum(H, na.rm=T)) #Shannon Wiener Diversity Index
NSim <- rand.neutral(J, Theta, string="spp.")
H<- (NSim/sum(NSim))*(-log(NSim/sum(NSim)))
repeat{
a <- c(s, (sum(H, na.rm=T)) #Shannon Wiener Diversity Index
NSim <- rand.neutral(J, Theta, string="spp.")
H<- (NSim/sum(NSim))*(-log(NSim/sum(NSim)))
s <- length(NSim)
if (s!=S) {
break
}
}
repeat{
NSim <- rand.neutral(J, Theta, string="spp.")
H<- (NSim/sum(NSim))*(-log(NSim/sum(NSim)))
s <- length(NSim)
a <- c(s, (sum(H, na.rm=T)) #Shannon Wiener Diversity Index
if (s!=S) {
break
}
}
repeat{
NSim <- rand.neutral(J, Theta, string="spp.")
H<- (NSim/sum(NSim))*(-log(NSim/sum(NSim)))
s <- length(NSim)
a <- c(s, (sum(H, na.rm=T)) #Shannon Wiener Diversity Index
if (s!=S) {
break
}
}
repeat{
a <- c(s, (sum(H, na.rm=T)) #Shannon Wiener Diversity Index
NSim <- rand.neutral(J, Theta, string="spp.")
H<- (NSim/sum(NSim))*(-log(NSim/sum(NSim)))
s <- length(NSim)
if (s!=S) {
break
}
}
repeat{
a <- sum(H, na.rm=T) #Shannon Wiener Diversity Index
NSim <- rand.neutral(J, Theta, string="spp.")
H<- (NSim/sum(NSim))*(-log(NSim/sum(NSim)))
s <- length(NSim)
if (s!=S) {
break
}
}
a
s
S
repeat{
a <- sum(H, na.rm=T) #Shannon Wiener Diversity Index
NSim <- rand.neutral(J, Theta, string="spp.")
H<- (NSim/sum(NSim))*(-log(NSim/sum(NSim)))
s <- length(NSim)
if (s!=S) {
break
}
}
a
s
load("~/GitHub/KuroshioR/.RData")
folder <- getwd() #sets directory as an object/path to folder that holds multiple .csv files
file_list <- list.files(path=folder, pattern="*.csv") # create list of all .csv files in folder
# read in each .csv file in file_list and create a data frame with the same name as the .csv file
for (i in 1:length(file_list)){
assign(file_list[i],
read.csv(paste(folder, '/', file_list[i], sep=''))
)} #Downloading all csv files to the Global Environment
#Loading packages
packages <- c("akima","iNEXT", "rareNMtests", "RColorBrewer", "grid", "gplots", "geosphere", "ggplot2", "gridExtra", "plyr", "prabclus", "sparcl", "vegan")
library("akima", lib.loc="~/R/win-library/3.2")
library("colorspace", lib.loc="~/R/win-library/3.2")
library("geosphere", lib.loc="~/R/win-library/3.2")
library("ggplot2", lib.loc="~/R/win-library/3.2")
library("gplots", lib.loc="~/R/win-library/3.2")
library("gridExtra", lib.loc="~/R/win-library/3.2")
library("iNEXT", lib.loc="~/R/win-library/3.2")
library("plyr", lib.loc="~/R/win-library/3.2")
library("prabclus", lib.loc="~/R/win-library/3.2")
library("RColorBrewer", lib.loc="~/R/win-library/3.2")
library("sparcl", lib.loc="~/R/win-library/3.2")
library("vegan", lib.loc="~/R/win-library/3.2")
library("untb", lib.loc="~/R/win-library/3.2")
library("GUILDS", lib.loc="~/R/win-library/3.2")
Cent <- origin[-c(186:190), c(3:length(origin))]
Cent <- cbind(Adiv.abiotic$lon, Cent)
SplitData(Cent, 1, "centi")
centitest <- rbind(centi143.5[2:ncol(centi143.5)]/80, centi144[2:ncol(centi144)]/80, centi144.5[2:ncol(centi144.5)]/80, centi145[2:ncol(centi145)]/100, centi145.5[2:ncol(centi145.5)]/100)
TetameResults <- read.csv("~/GitHub/KuroshioR/TetameResults.csv", dec=",")
View(TetameResults)
CleanupTetame <- function(tetame, cutoff){
J <- tetame[,"J"]
S <- tetame[,"S"]
Theta <- as.numeric(rep(0, nrow(tetame)))
m     <- as.numeric(rep(0, nrow(tetame)))
Theta2<- as.numeric(rep(0, nrow(tetame)))
m2     <- c( as.numeric(rep(0, nrow(tetame))))
Station <- tetame[,"station"]
depth <- tetame[, "depth..m."]
for (i in 1:nrow(tetame)) {
theta1 <- tetame[i, "Theta"]
theta2 <- tetame[i, "Theta2"]
if (theta1<theta2 & theta1<cutoff) {
Theta[i] <- theta1
m[i] <- tetame[i, "m"]
} else
if(theta2<theta1 & theta2<cutoff){
Theta[i] <- theta2
m[i] <- tetame[i, "m2"]
} else
if(theta1==theta2 & theta1<cutoff) {
Theta[i] <- theta1
m[i] <- tetame[i, "m"]
} else
if (theta1 & theta2 >cutoff) {
Theta[i] <- theta1
m[i] <- tetame[i, "m"]
Theta2[i] <- theta2
m2[i] <- tetame[i, "m2"]}
}
cbind(Station, depth, S, J, Theta, m, Theta2, m2)
}
CleanTetame <- CleanupTetame(tetame, 100)
stationinfo<- Adiv.abiotic[-c(97, 98,99), c("station", "depth..m.")]
tetame <- cbind(stationinfo, TetameResults)
CleanTetame <- CleanupTetame(, 100)
CleanTetame <- CleanupTetame(tetame, 100)
View(tetame)
CleanupTetame <- function(tetame, cutoff){
J <- tetame[,"J"]
S <- tetame[,"S"]
Theta <- as.numeric(rep(0, nrow(tetame)))
m     <- as.numeric(rep(0, nrow(tetame)))
Theta2<- as.numeric(rep(0, nrow(tetame)))
m2     <- c( as.numeric(rep(0, nrow(tetame))))
Station <- tetame[,"station"]
depth <- tetame[, "depth..m."]
for (i in 1:nrow(tetame)) {
theta1 <- tetame[i, "Theta"]
theta2 <- tetame[i, "Theta2"]
if (theta1< theta2 & theta1<cutoff) {
Theta[i] <- theta1
m[i] <- tetame[i, "m"]
} else
if(theta2<theta1 & theta2<cutoff){
Theta[i] <- theta2
m[i] <- tetame[i, "m2"]
} else
if(theta1==theta2 & theta1<cutoff) {
Theta[i] <- theta1
m[i] <- tetame[i, "m"]
} else
if (theta1 & theta2 >cutoff) {
Theta[i] <- theta1
m[i] <- tetame[i, "m"]
Theta2[i] <- theta2
m2[i] <- tetame[i, "m2"]}
}
cbind(Station, depth, S, J, Theta, m, Theta2, m2)
}
CleanTetame <- CleanupTetame(tetame, 100)
J <- tetame[,"J"]
S <- tetame[,"S"]
Theta <- as.numeric(rep(0, nrow(tetame)))
m     <- as.numeric(rep(0, nrow(tetame)))
Theta2<- as.numeric(rep(0, nrow(tetame)))
m2     <- c( as.numeric(rep(0, nrow(tetame))))
Station <- tetame[,"station"]
depth <- tetame[, "depth..m."]
for (i in 1:nrow(tetame)) {
theta1 <- tetame[i, "Theta"]
theta2 <- tetame[i, "Theta2"]
if (theta1 < theta2 && theta1<cutoff) {
Theta[i] <- theta1
m[i] <- tetame[i, "m"]
} else
if(theta2< theta1 & theta2<cutoff){
Theta[i] <- theta2
m[i] <- tetame[i, "m2"]
} else
if(theta1==theta2 & theta1<cutoff) {
Theta[i] <- theta1
m[i] <- tetame[i, "m"]
} else
if (theta1 & theta2 >cutoff) {
Theta[i] <- theta1
m[i] <- tetame[i, "m"]
Theta2[i] <- theta2
m2[i] <- tetame[i, "m2"]}
}
theta1
theta1 <- tetame[1, "Theta"]
theta1
View(tetame)
read.csv("TetameResults, TetameResults")
read.csv("TetameResults.csv", TetameResults)
read.csv(TetameResults.csv, TetameResults)
read.csv("TetameResults.csv", "TetameResults")
read.csv("TetameResults.csv")
TetameResults <- read.csv("TetameResults.csv")
tetame <- cbind(stationinfo, TetameResults)
CleanTetame <- CleanupTetame(tetame, 100)
NeutralTest <- function(data, data2, rep) #data & data2 must have the same number of rows for this to work.
#data & data2 must have only abundances of organisms for each sample, nothing else.
{ startt=Sys.time()
P <- as.numeric(rep(0, nrow(data)))
ci <- as.numeric(rep(0, nrow(data)))
reps <- c(1:rep)
Hlist <- as.numeric(rep(0, nrow(data)))
Ho <- apply(data2, 1, function(x) (x/sum(x))*(-log(x/sum(x)))) #Shannon Wiener Diversity precursor
Ho <- colSums(Ho, na.rm=T)
Neutral_MeanH <- as.numeric(rep(0, nrow(data)))
Station <- data[, "Station"]
depth <- data[, "depth"]
for (i in 1:nrow(data)) {
S <- data[i, "S"]
Theta <- data[i, "Theta"]
m <- data[i, "m"]
J <- data[i, "J"]
Hlist <- as.numeric(rep(0, rep))
for(z in 1:rep) {
#Nsim <- matrix(nrow=rep, ncol=S)
repeat{
Nsim <- rand.neutral(J, Theta)
s    <- length(Nsim)
if (s==S) break
}
#Nsim[z,] <- as.numeric(Ns)
H <- (Nsim/sum(Nsim))*(-log(Nsim/sum(Nsim)))
H<- sum(H, na.rm=T) #Shannon Wiener Diversity Index
Hlist[z] <- H
}
Neutral_MeanH[i] <- mean(Hlist)
p<- t.test(Hlist, mu=Ho[i])
ci[i]<- list(p[4])
P[i] <- as.numeric(p[3]) # Ho: mu=3
endt=Sys.time()
diff<- endt-startt
#print(P[i])
print(paste("station:", Station[i], "depth:", depth[i], "p-value:", P[i], "CI:", ci[i], "H observed:", Ho[i], "mean H:", Neutral_MeanH[i], "calc.time:", Sys.time()))
}
NTest <-  data.frame(Station, depth, P, Neutral_MeanH, Ho)
return(NTest)
}
NeutralTest(CleanTetame, centitest, rep=100)
install.packages("parallelize.dynamic")
install.packages("parallelMap")
library("akima", lib.loc="~/R/win-library/3.2")
library("colorspace", lib.loc="~/R/win-library/3.2")
library("geosphere", lib.loc="~/R/win-library/3.2")
library("ggplot2", lib.loc="~/R/win-library/3.2")
library("gplots", lib.loc="~/R/win-library/3.2")
library("gridExtra", lib.loc="~/R/win-library/3.2")
library("iNEXT", lib.loc="~/R/win-library/3.2")
library("plyr", lib.loc="~/R/win-library/3.2")
library("prabclus", lib.loc="~/R/win-library/3.2")
library("RColorBrewer", lib.loc="~/R/win-library/3.2")
library("sparcl", lib.loc="~/R/win-library/3.2")
library("vegan", lib.loc="~/R/win-library/3.2")
library("untb", lib.loc="~/R/win-library/3.2")
library("GUILDS", lib.loc="~/R/win-library/3.2")
library("akima", lib.loc="~/R/win-library/3.2")
install.packages("snow")
library("snow", lib.loc="~/R/win-library/3.2")
parallelize.dynamic::parallelize_initialize()
library("parallelize.dynamic", lib.loc="~/R/win-library/3.2")
parallelize.initialize
parallelize.initialize()
parallelize_initialize()
parallelize_call()
parallelize_call
parallelize(NeutralTest)
parallelize(.NeutralTest)
parallel10 = NeutralTest(CleanTetame, centitest, rep=100)
install.packages("snowfall")
library("snow", lib.loc="~/R/win-library/3.2")
library("snowfall", lib.loc="~/R/win-library/3.2")
sfInit()
parallel()
sfInit( parallel=TRUE, cpus=5 )
sfInit( parallel=TRUE, cpus=6 )
sfStop()
NeutralTest(CleanTetame, centitest, rep=100)
NeutralTest <- function(data, data2, rep) #data & data2 must have the same number of rows for this to work.
#data & data2 must have only abundances of organisms for each sample, nothing else.
{ startt=Sys.time()
P <- as.numeric(rep(0, nrow(data)))
ci <- as.numeric(rep(0, nrow(data)))
reps <- c(1:rep)
Hlist <- as.numeric(rep(0, nrow(data)))
Ho <- apply(data2, 1, function(x) (x/sum(x))*(-log(x/sum(x)))) #Shannon Wiener Diversity precursor
Ho <- colSums(Ho, na.rm=T)
Neutral_MeanH <- as.numeric(rep(0, nrow(data)))
Station <- data[, "Station"]
depth <- data[, "depth"]
for (i in 1:nrow(data)) {
S <- data[i, "S"]
Theta <- data[i, "Theta"]
m <- data[i, "m"]
J <- data[i, "J"]
Hlist <- as.numeric(rep(0, rep))
for(z in 1:rep) {
#Nsim <- matrix(nrow=rep, ncol=S)
repeat{
Nsim <- rand.neutral(J, Theta, pad=TRUE)
s    <- length(Nsim)
if (s==S) break
}
#Nsim[z,] <- as.numeric(Ns)
H <- (Nsim/sum(Nsim))*(-log(Nsim/sum(Nsim)))
H<- sum(H, na.rm=T) #Shannon Wiener Diversity Index
Hlist[z] <- H
}
Neutral_MeanH[i] <- mean(Hlist)
p<- t.test(Hlist, mu=Ho[i])
ci[i]<- list(p[4])
P[i] <- as.numeric(p[3]) # Ho: mu=3
endt=Sys.time()
diff<- endt-startt
#print(P[i])
print(paste("station:", Station[i], "depth:", depth[i], "p-value:", P[i], "CI:", ci[i], "H observed:", Ho[i], "mean H:", Neutral_MeanH[i], "calc.time:", Sys.time()))
}
NTest <-  data.frame(Station, depth, P, Neutral_MeanH, Ho)
return(NTest)
}
#H <- Create.Diversity.I(centitest, 4, 82  )
#H <- H[-c(97:99), "ShannonWiener"] #Must remove these rows for now because they had all decimals for their abundances
# Adds Shannon values to the tetame data so a test can be performed
NeutralTest(CleanTetame, centitest, rep=100)
NeutralTest <- function(data, data2, rep) #data & data2 must have the same number of rows for this to work.
#data & data2 must have only abundances of organisms for each sample, nothing else.
{ startt=Sys.time()
P <- as.numeric(rep(0, nrow(data)))
ci <- as.numeric(rep(0, nrow(data)))
reps <- c(1:rep)
Hlist <- as.numeric(rep(0, nrow(data)))
Ho <- apply(data2, 1, function(x) (x/sum(x))*(-log(x/sum(x)))) #Shannon Wiener Diversity precursor
Ho <- colSums(Ho, na.rm=T)
Neutral_MeanH <- as.numeric(rep(0, nrow(data)))
Station <- data[, "Station"]
depth <- data[, "depth"]
for (i in 1:nrow(data)) {
S <- data[i, "S"]
Theta <- data[i, "Theta"]
m <- data[i, "m"]
J <- data[i, "J"]
Hlist <- as.numeric(rep(0, rep))
for(z in 1:rep) {
#Nsim <- matrix(nrow=rep, ncol=S)
repeat{
Nsim <- rand.neutral(J, Theta)
s    <- length(Nsim)
if (s==S) break
}
#Nsim[z,] <- as.numeric(Ns)
H <- (Nsim/sum(Nsim))*(-log(Nsim/sum(Nsim)))
H<- sum(H, na.rm=T) #Shannon Wiener Diversity Index
Hlist[z] <- H
}
Neutral_MeanH[i] <- mean(Hlist)
p<- t.test(Hlist, mu=Ho[i])
ci[i]<- list(p[4])
P[i] <- as.numeric(p[3]) # Ho: mu=3
endt=Sys.time()
diff<- endt-startt
#print(P[i])
print(paste("station:", Station[i], "depth:", depth[i], "p-value:", P[i], "CI:", ci[i], "H observed:", Ho[i], "mean H:", Neutral_MeanH[i], "calc.time:", Sys.time()))
}
NTest <-  data.frame(Station, depth, P, Neutral_MeanH, Ho)
return(NTest)
}
#H <- Create.Diversity.I(centitest, 4, 82  )
#H <- H[-c(97:99), "ShannonWiener"] #Must remove these rows for now because they had all decimals for their abundances
# Adds Shannon values to the tetame data so a test can be performed
NeutralTest(CleanTetame, centitest, rep=100)
NeutralTest <- function(data, data2, rep) #data & data2 must have the same number of rows for this to work.
#data & data2 must have only abundances of organisms for each sample, nothing else.
{ startt=Sys.time()
P <- as.numeric(rep(0, nrow(data)))
ci <- as.numeric(rep(0, nrow(data)))
reps <- c(1:rep)
Hlist <- as.numeric(rep(0, nrow(data)))
Ho <- apply(data2, 1, function(x) (x/sum(x))*(-log(x/sum(x)))) #Shannon Wiener Diversity precursor
Ho <- colSums(Ho, na.rm=T)
Neutral_MeanH <- as.numeric(rep(0, nrow(data)))
Station <- data[, "Station"]
depth <- data[, "depth"]
for (i in 1:nrow(data)) {
S <- data[i, "S"]
Theta <- data[i, "Theta"]
m <- data[i, "m"]
J <- data[i, "J"]
Hlist <- as.numeric(rep(0, rep))
for(z in 1:rep) {
#Nsim <- matrix(nrow=rep, ncol=S)
repeat{
Nsim <- rand.neutral(J, Theta)
s    <- length(Nsim)
if (s==S) break
}
#Nsim[z,] <- as.numeric(Ns)
H <- (Nsim/sum(Nsim))*(-log(Nsim/sum(Nsim)))
H<- sum(H, na.rm=T) #Shannon Wiener Diversity Index
Hlist[z] <- H
}
Neutral_MeanH[i] <- mean(Hlist)
p<- t.test(Hlist, mu=Ho[i])
ci[i]<- list(p[4])
P[i] <- as.numeric(p[3]) # Ho: mu=3
endt=Sys.time()
diff<- endt-startt
#print(P[i])
print(paste("station:", Station[i], "depth:", depth[i], "p-value:", P[i], "CI:", ci[i], "H observed:", Ho[i], "mean H:", Neutral_MeanH[i], "calc.time:", Sys.time()))
}
NTest <-  data.frame(Station, depth, P, Neutral_MeanH, Ho)
return(NTest)
}
#H <- Create.Diversity.I(centitest, 4, 82  )
#H <- H[-c(97:99), "ShannonWiener"] #Must remove these rows for now because they had all decimals for their abundances
# Adds Shannon values to the tetame data so a test can be performed
NeutralTest(CleanTetame, centitest, rep=10)
