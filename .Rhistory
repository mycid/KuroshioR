H<- (Nsim/sum(Nsim))*(-log(Nsim/sum(Nsim)))
H<- sum(H, na.rm=T) #Shannon Wiener Diversity Index
}
,reps))
p<- t.test(Hdist,mu=data[i, "H"])
P[i] <- as.numeric(p[3]) # Ho: mu=3
}
return(P)
}
NeutralTest(Neutral)
NeutralTest <- function(data, reps=1000)
{
for (i in 1:nrow(data)) {
data[i, "S"] <-S
data[i, "Theta"]<-Theta
data[i, "m"] <-m
data[i, "J"] <-J
Hdist<- list(replicate(
repeat{
NSim <- rand.neutral(J, Theta, m, string="spp.")
s <- sum(which(NSim>0))
if (s!=S) {
break
}
H<- (Nsim/sum(Nsim))*(-log(Nsim/sum(Nsim)))
H<- sum(H, na.rm=T) #Shannon Wiener Diversity Index
}
,reps))
p<- t.test(Hdist,mu=data[i, "H"])
P[i] <- as.numeric(p[3]) # Ho: mu=3
}
return(P)
}
NeutralTest(Neutral)
NeutralTest <- function(data, reps=1000)
{
for (i in 1:nrow(data)) {
data[i, "S"] <-S
data[i, "Theta"]<-Theta
data[i, "m"] <-m
data[i, "J"] <-J
Hdist<- list(replicate(
repeat{
NSim <- rand.neutral(J, Theta, m, string="spp.")
s <- sum(which(NSim>0))
if (s!==S) {
break
}
H<- (Nsim/sum(Nsim))*(-log(Nsim/sum(Nsim)))
H<- sum(H, na.rm=T) #Shannon Wiener Diversity Index
}
,reps))
p<- t.test(Hdist,mu=data[i, "H"])
P[i] <- as.numeric(p[3]) # Ho: mu=3
}
return(P)
}
NeutralTest <- function(data, reps=1000)
{
for (i in 1:nrow(data)) {
data[i, "S"] <-S
data[i, "Theta"]<-Theta
data[i, "m"] <-m
data[i, "J"] <-J
Hdist<- list(replicate(
repeat{
NSim <- rand.neutral(J, Theta, m, string="spp.")
s <- sum(which(NSim>0))
if (s!=S) {
break
}
H<- (Nsim/sum(Nsim))*(-log(Nsim/sum(Nsim)))
H<- sum(H, na.rm=T) #Shannon Wiener Diversity Index
}
,reps))
p<- t.test(Hdist,mu=data[i, "H"])
P[i] <- as.numeric(p[3]) # Ho: mu=3
}
return(P)
}
NeutralTest <- function(data, reps=1000)
{
for (i in 1:nrow(data)) {
data[i, 1] <-S
data[i, "Theta"]<-Theta
data[i, "m"] <-m
data[i, "J"] <-J
Hdist<- list(replicate(
repeat{
NSim <- rand.neutral(J, Theta, m, string="spp.")
s <- sum(which(NSim>0))
if (s!=S) {
break
}
H<- (Nsim/sum(Nsim))*(-log(Nsim/sum(Nsim)))
H<- sum(H, na.rm=T) #Shannon Wiener Diversity Index
}
,reps))
p<- t.test(Hdist,mu=data[i, "H"])
P[i] <- as.numeric(p[3]) # Ho: mu=3
}
return(P)
}
NeutralTest(Neutral)
NeutralTest <- function(data, reps=1000)
{
for (i in 1:nrow(data)) {
#S <- data[i, 1]
#data[i, "Theta"]<-Theta
#data[i, "m"] <-m
#data[i, "J"] <-J
Hdist<- list(replicate(
repeat{
NSim <- rand.neutral(data[i, "J"], data[i, "Theta"], data[i, "m"], string="spp.")
s <- sum(which(NSim>0))
if (s!=data[i,"S"]) {
break
}
H<- (Nsim/sum(Nsim))*(-log(Nsim/sum(Nsim)))
H<- sum(H, na.rm=T) #Shannon Wiener Diversity Index
}
,reps))
p<- t.test(Hdist,mu=data[i, "H"])
P[i] <- as.numeric(p[3]) # Ho: mu=3
}
return(P)
}
NeutralTest(Neutral)
rand.neutral(Neutral[1,2], Neutral[1,4], Neutral[1,5], string="spp.")
NeutralTest <- function(data, reps=1000)
{
for (i in 1:nrow(data)) {
S <- data[i, 1]
Theta <- data[i, "Theta"]
m <- data[i, "m"]
J <- data[i, "J"]
Hdist<- list(replicate(
repeat{
NSim <- rand.neutral(J, Theta, m, string="spp.")
s <- sum(which(NSim>0))
if (s!=S) {
break
}
H<- (Nsim/sum(Nsim))*(-log(Nsim/sum(Nsim)))
H<- sum(H, na.rm=T) #Shannon Wiener Diversity Index
}
,reps))
p<- t.test(Hdist,mu=data[i, "H"])
P[i] <- as.numeric(p[3]) # Ho: mu=3
}
return(P)
}
NeutralTest(Neutral)
NeutralTest <- function(data, reps=1000)
{
for (i in 1:nrow(data)) {
S <- data[i, 1]
Theta <- data[i, "Theta"]
m <- data[i, "m"]
J <- data[i, "J"]
Hdist<- list(replicate(
repeat{
NSim <- rand.neutral(J, Theta, string="spp.")
s <- sum(which(NSim>0))
if (s!=S) {
break
}
H<- (Nsim/sum(Nsim))*(-log(Nsim/sum(Nsim)))
H<- sum(H, na.rm=T) #Shannon Wiener Diversity Index
}
,reps))
p<- t.test(Hdist,mu=data[i, "H"])
P[i] <- as.numeric(p[3]) # Ho: mu=3
}
return(P)
}
NeutralTest(Neutral)
NeutralTest <- function(data, reps=1000)
{
for (i in 1:nrow(data)) {
S <- data[i, 1]
Theta <- data[i, "Theta"]
m <- data[i, "m"]
J <- data[i, "J"]
Hdist<- list(replicate(
repeat{
NSim <- rand.neutral(J, Theta, string="spp.")
s <- sum(which(NSim>0))
if (s!=S) {
break
}
H<- (Nsim/sum(Nsim))*(-log(Nsim/sum(Nsim)))
H<- sum(H, na.rm=T) #Shannon Wiener Diversity Index
}
,reps))
p<- t.test(Hdist,mu=data[i, "H"])
P[i] <- as.numeric(p[3]) # Ho: mu=3
}
return(P)
}
NeutralTest <- function(data, reps=1000)
{
for (i in 1:nrow(data)) {
S <- data[i, 1]
Theta <- data[i, "Theta"]
m <- data[i, "m"]
J <- data[i, "J"]
Hdist<- list(replicate(
repeat{
NSim <- rand.neutral(J, Theta, string="spp.")
s <- sum(which(NSim>0))
if (s!=S) {
break
}
H<- (Nsim/sum(Nsim))*(-log(Nsim/sum(Nsim)))
H<- sum(H, na.rm=T) #Shannon Wiener Diversity Index
}
,reps))
p<- t.test(Hdist,mu=data[i, "H"])
P[i] <- as.numeric(p[3]) # Ho: mu=3
}
return(P)
}
NeutralTest(Neutral)
NeutralTest(Neutral)
S <- Neutral[1, "S"]
Theta <- Neutral[1, "Theta"]
m <- Neutral[1, "m"]
J <- Neutral[1, "J"]
NSim <- rand.neutral(J, Theta, string="spp.")
NSim <- rand.neutral(J, Theta, m string="spp.")
NSim <- rand.neutral(J, Theta, m, string="spp.")
s <- sum(which(NSim>0))
repeat{
NSim <- rand.neutral(J, Theta, string="spp.")
s <- sum(which(NSim>0))
if (s!=S) {
break
}
H<- (Nsim/sum(Nsim))*(-log(Nsim/sum(Nsim)))
H<- sum(H, na.rm=T) #Shannon Wiener Diversity Index
}
Hdist<- list(replicate(
repeat{
NSim <- rand.neutral(J, Theta, string="spp.")
s <- sum(which(NSim>0))
if (s!=S) {
break
}
H<- (Nsim/sum(Nsim))*(-log(Nsim/sum(Nsim)))
H<- sum(H, na.rm=T) #Shannon Wiener Diversity Index
}
,1000))
Hdist<- replicate(
repeat{
NSim <- rand.neutral(J, Theta, string="spp.")
s <- sum(which(NSim>0))
if (s!=S) {
break
}
H<- (Nsim/sum(Nsim))*(-log(Nsim/sum(Nsim)))
H<- sum(H, na.rm=T) #Shannon Wiener Diversity Index
}
,1000)
NSim <- rand.neutral(J, Theta, string="spp.")
H<- (Nsim/sum(Nsim))*(-log(Nsim/sum(Nsim)))
NSim <- rand.neutral(J, Theta, string="spp.")
H<- (Nsim/sum(Nsim))*(-log(Nsim/sum(Nsim)))
Hdist<- replicate(
repeat{
NSim <- rand.neutral(J, Theta, string="spp.")
s <- sum(which(NSim>0))
if (s!=S) {
break
}
H<- (NSim/sum(NSim))*(-log(NSim/sum(NSim)))
H<- sum(H, na.rm=T) #Shannon Wiener Diversity Index
}
,1000)
NSim <- rand.neutral(J, Theta, string="spp.")
H<- (NSim/sum(NSim))*(-log(NSim/sum(NSim)))
H<- sum(H, na.rm=T) #Shannon Wiener Diversity Index
s <- sum(which(NSim>0))
s
rand.neutral
Nsim
NSim
s <- length(NSim)
s
repeat{
NSim <- rand.neutral(J, Theta, string="spp.")
s <- length(NSim)
if (s!=S) {
break
}
Hdist<- replicate(
repeat{
NSim <- rand.neutral(J, Theta, string="spp.")
s <- length(NSim)
if (s!=S) {
break
}
H<- (NSim/sum(NSim))*(-log(NSim/sum(NSim)))
H<- sum(H, na.rm=T) #Shannon Wiener Diversity Index
}
,1000)
,1000)
Hdist<- replicate(
repeat{
NSim <- rand.neutral(J, Theta, string="spp.")
s <- length(NSim)
if (s!=S) {
break
}
H<- (NSim/sum(NSim))*(-log(NSim/sum(NSim)))
H<- sum(H, na.rm=T) #Shannon Wiener Diversity Index
}
,1000)
Hdist<-repeat{
NSim <- rand.neutral(J, Theta, string="spp.")
s <- length(NSim)
if (s!=S) {
break
}
H<- (NSim/sum(NSim))*(-log(NSim/sum(NSim)))
H<- sum(H, na.rm=T) #Shannon Wiener Diversity Index
}
Hdist
Hdist<-for (1:1000){
Hdist<-for (i:1000){
NSim <- rand.neutral(J, Theta, string="spp.")
Hdist<-for (i in 1:1000){
NSim <- rand.neutral(J, Theta, string="spp.")
s <- length(NSim)
if (s!=S) {
break
}
H<- (NSim/sum(NSim))*(-log(NSim/sum(NSim)))
H<- sum(H, na.rm=T) #Shannon Wiener Diversity Index
}
Hdist
Hdist<-repeat{
NSim <- rand.neutral(J, Theta, string="spp.")
s <- length(NSim)
if (s!=S) {
Hdist<-repeat{
NSim <- rand.neutral(J, Theta, string="spp.")
s <- length(NSim)
if (s!=S) {
break
}
H<- (NSim/sum(NSim))*(-log(NSim/sum(NSim)))
H<- sum(H, na.rm=T) #Shannon Wiener Diversity Index
}
f
}
)
Hdist<-repeat{
NSim <- rand.neutral(J, Theta, string="spp.")
s <- length(NSim)
if (s!=S) {
break
}
H<- (NSim/sum(NSim))*(-log(NSim/sum(NSim)))
H<- sum(H, na.rm=T) #Shannon Wiener Diversity Index
}
Hdist
NSim <- rand.neutral(J, Theta, string="spp.")
s <- length(NSim)
s!=S
H<- (NSim/sum(NSim))*(-log(NSim/sum(NSim)))
H<- sum(H, na.rm=T) #Shannon Wiener Diversity Index
Hdist<-repeat{
NSim <- rand.neutral(J, Theta, string="spp.")
s <- length(NSim)
if (s!=S) {
break
}
H<- (NSim/sum(NSim))*(-log(NSim/sum(NSim)))
sum(H, na.rm=T) #Shannon Wiener Diversity Index
}
Hdist
Hdist<-repeat{
NSim <- rand.neutral(J, Theta, string="spp.")
s <- length(NSim)
if (s!=S) {
break
}
H<- (NSim/sum(NSim))*(-log(NSim/sum(NSim)))
sum(H, na.rm=T) #Shannon Wiener Diversity Index
}
}
Hdist
Hdist<-repeat{
NSim <- rand.neutral(J, Theta, string="spp.")
H<- (NSim/sum(NSim))*(-log(NSim/sum(NSim)))
sum(H, na.rm=T) #Shannon Wiener Diversity Index
s <- length(NSim)
if (s!=S) {
break
}
}
Hdist
Hdist<-
repeat{
sum(H, na.rm=T) #Shannon Wiener Diversity Index
NSim <- rand.neutral(J, Theta, string="spp.")
H<- (NSim/sum(NSim))*(-log(NSim/sum(NSim)))
s <- length(NSim)
if (s!=S) {
break
}
}
Hidst
Hdist
NSim <- rand.neutral(J, Theta, string="spp.")
Nsim
NSim
H<- (NSim/sum(NSim))*(-log(NSim/sum(NSim)))
s <- length(NSim)
Hdist<-
repeat{
print(sum(H, na.rm=T)) #Shannon Wiener Diversity Index
NSim <- rand.neutral(J, Theta, string="spp.")
H<- (NSim/sum(NSim))*(-log(NSim/sum(NSim)))
s <- length(NSim)
if (s!=S) {
break
}
}
repeat{
a <- (sum(H, na.rm=T)) #Shannon Wiener Diversity Index
NSim <- rand.neutral(J, Theta, string="spp.")
H<- (NSim/sum(NSim))*(-log(NSim/sum(NSim)))
s <- length(NSim)
if (s!=S) {
break
}
}
a
repeat{
a <- (sum(H, na.rm=T)) #Shannon Wiener Diversity Index
NSim <- rand.neutral(J, Theta, string="spp.")
H<- (NSim/sum(NSim))*(-log(NSim/sum(NSim)))
s <- length(NSim)
print(s)
if (s!=S) {
break
}
}
a <- c(s, (sum(H, na.rm=T)) #Shannon Wiener Diversity Index
NSim <- rand.neutral(J, Theta, string="spp.")
H<- (NSim/sum(NSim))*(-log(NSim/sum(NSim)))
repeat{
a <- c(s, (sum(H, na.rm=T)) #Shannon Wiener Diversity Index
NSim <- rand.neutral(J, Theta, string="spp.")
H<- (NSim/sum(NSim))*(-log(NSim/sum(NSim)))
s <- length(NSim)
if (s!=S) {
break
}
}
repeat{
NSim <- rand.neutral(J, Theta, string="spp.")
H<- (NSim/sum(NSim))*(-log(NSim/sum(NSim)))
s <- length(NSim)
a <- c(s, (sum(H, na.rm=T)) #Shannon Wiener Diversity Index
if (s!=S) {
break
}
}
repeat{
NSim <- rand.neutral(J, Theta, string="spp.")
H<- (NSim/sum(NSim))*(-log(NSim/sum(NSim)))
s <- length(NSim)
a <- c(s, (sum(H, na.rm=T)) #Shannon Wiener Diversity Index
if (s!=S) {
break
}
}
repeat{
a <- c(s, (sum(H, na.rm=T)) #Shannon Wiener Diversity Index
NSim <- rand.neutral(J, Theta, string="spp.")
H<- (NSim/sum(NSim))*(-log(NSim/sum(NSim)))
s <- length(NSim)
if (s!=S) {
break
}
}
repeat{
a <- sum(H, na.rm=T) #Shannon Wiener Diversity Index
NSim <- rand.neutral(J, Theta, string="spp.")
H<- (NSim/sum(NSim))*(-log(NSim/sum(NSim)))
s <- length(NSim)
if (s!=S) {
break
}
}
a
s
S
repeat{
a <- sum(H, na.rm=T) #Shannon Wiener Diversity Index
NSim <- rand.neutral(J, Theta, string="spp.")
H<- (NSim/sum(NSim))*(-log(NSim/sum(NSim)))
s <- length(NSim)
if (s!=S) {
break
}
}
a
s
