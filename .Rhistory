#header choses a header name for the new dataframes
x <- x[order(x[,column]),]
Depths <- split(x,rep(1:n, ceiling(length(x)/n),length.out = length(x)))
Depths <- setNames(Depths, paste0(header, unique(rep(1:n))))
list2env(Depths, globalenv())
}
# ordering a triangular heat map for correlation
reorder_cormat <- function(cormat){
# Use correlation between variables as distance
dd <- as.dist((1-cormat)/2)
hc <- hclust(dd)
cormat <-cormat[hc$order, hc$order]
}
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)}
#### An attempted hack of preston lines. Hasn't worked so far.
lines.preston <-
function(x, xadjust = 0.5, ...)
{
oct <- as.numeric(names(x)) - xadjust
lines(oct, x, ...)
}
#An attempted hack of logkda.pari(a,...). This function currently not working.
logkda.pari <- function (a, numerical = TRUE)
{
if ((system("gp --version", intern = FALSE, ignore.stderr = TRUE)) !=
0) {
warning("pari/gp not installed: method changed to 'polyn'")
return(logkda.polyn(a))
}
pari_string <- "\n allocatemem(); \n allocatemem();\n allocatemem(); \n allocatemem()
logKDAvec(abund) =\n {\n
local(S,J,n,m,k,k0,k1,k2,Told,Tnew,specabund,i,j,Sdiff,cnt1,cnt2);\n
abund = vecsort(abund);\n S = length(abund);\n J = sum(k =
1,S,abund[k]);\n maxabund = abund[S];\n Sdiff = 1; for(i =
2,S,if(abund[i] != abund[i - 1],Sdiff++));\n specabund =
matrix(2,Sdiff,i,j,0); specabund[1,1] = abund[1]; specabund[2,1] = 1;\n
cnt1 = 1; cnt2 = 1;\n for(i = 2,S,\n    if(abund[i] != abund[i - 1],\n
cnt1++;\n        cnt2 = 1;\n        specabund[1,cnt1] =
abund[i];\n        specabund[2,cnt1] = cnt2\n    ,\n        cnt2++;\n
specabund[2,cnt1] = cnt2\n    )\n );\n\n polyn = vector(1,i,1);\n i
= 1;\n if(specabund[1,i] == 1,i++);\n Told = vector(1,i,1);\n for(n =
2,maxabund,\n    Tnew = vector(n,m,(n > m) * Told[min(n-1,m)] +
Told[max(1,m - 1)] * (m - 1)/(n - 1) + 0. );\n    if(n ==
specabund[1,i],\n        for(k0 = 1,specabund[2,i],\n
lenpolyn2 = length(polyn) + length(Tnew) - 1;\n           polyn =
vector(lenpolyn2,k1,sum(k2 = max(1,k1 + 1 -
length(Tnew)),min(length(polyn),k1),polyn[k2] * Tnew[k1 + 1 - k2]));\n\n
);\n        i++;\n    );\n    Told = vector(n,m,Tnew[m]);\n );\n
logKDA = log(polyn);\n\n logKDA\n }\n "
if (isTRUE(as.logical(Sys.info()[1] == "Windows"))) {
return(.logkda.pari.windows(a, numerical, pari_string))
}
else {
return(.logkda.pari.unix(a, numerical, pari_string))
}
}
NeutralTest <- function(data, data2, rep) #data & data2 must have the same number of rows for this to work.
#data & data2 must have only abundances of organisms for each sample, nothing else.
{ startt=Sys.time()
P <- as.numeric(rep(0, nrow(data)))
ci <- as.numeric(rep(0, nrow(data)))
reps <- c(1:rep)
Hlist <- as.numeric(rep(0, nrow(data)))
Ho <- apply(data2, 1, function(x) (x/sum(x))*(-log(x/sum(x)))) #Shannon Wiener Diversity precursor
Ho <- colSums(Ho, na.rm=T)
Neutral_MeanH <- as.numeric(rep(0, nrow(data)))
Station <- data[, "Station"]
depth <- data[, "depth"]
for (i in 1:nrow(data)) {
S <- data[i, "S"]
Theta <- data[i, "Theta"]
m <- data[i, "m"]
J <- data[i, "J"]
Hlist <- as.numeric(rep(0, rep))
#while (starttime+10 > Sys.time()) {
starttime=Sys.time()
for(z in 1:rep) {
#while (z<101 & starttime+300>Sys.time()) {
print(z)
#Nsim <- matrix(nrow=rep, ncol=S)
repeat{
Nsim <- rand.neutral(J, Theta)
s    <- length(Nsim)
if (s==S) break
}
#Nsim[z,] <- as.numeric(Ns)
H <- (Nsim/sum(Nsim))*(-log(Nsim/sum(Nsim)))
H<- sum(H, na.rm=T) #Shannon Wiener Diversity Index
Hlist[z] <- H
starttime=Sys.time()
}
Neutral_MeanH[i] <- mean(Hlist)
p<- t.test(Hlist, mu=Ho[i])
ci[i]<- list(p[4])
P[i] <- as.numeric(p[3]) # Ho: mu=3
endt=Sys.time()
diff<- endt-startt
#print(P[i])
print(paste("station:", Station[i], "depth:", depth[i], "p-value:", P[i], "CI:", ci[i], "H observed:", Ho[i], "mean H:", Neutral_MeanH[i], "calc.time:", Sys.time()))
}
NTest <-  data.frame(Station, depth, P, Neutral_MeanH, Ho)
return(NTest)
}
#H <- Create.Diversity.I(centitest, 4, 82  )
#H <- H[-c(97:99), "ShannonWiener"] #Must remove these rows for now because they had all decimals for their abundances
# Adds Shannon values to the tetame data so a test can be performed
#NeutralTest(CleanTetame, centitest, rep=100)
Stationtest<- function(data) { #Data must have depth in first row, and a column STATION written in all caps
SL <- (unique(data[,"STATION"]))
centiStation <- matrix(0,length(SL),ncol(data))
for(i in 1:length(SL)){
Station <- toString(SL[i])
datas <- data[which(data$STATION==Station),]
centi<- colSums(datas[,4:74])
print(centi)
centiStation[i,] <- as.matrix(centiStation[i,]+centi)
}
return(centiStation)}
NeutralParams <- function (data)
{
S<- apply(data, 1, function(x) sum(x>0))
J<- apply(data, 1, function(x) sum(x))
H<- apply(data, 1, function(x) (x/sum(x))*(-log(x/sum(x)))) #Shannon Wiener Diversity precursor
H <- colSums (H, na.rm=T) #Shannon Wiener Diversity Index
Neut <- cbind(S, J, H)
Neutral <- data.frame(matrix(ncol=2, nrow=nrow(data)))
colnames(Neutral) <- c(x="Theta", y="m")
for(i in 1:nrow(data)) {
d<- c("Theta", "m")
Neutral <- data.frame(x=2,y=39)
for(i in 1:nrow(data)) {
l<- logkda.R(data[i,], use.brob=TRUE)  # Use logkda() if pari/gp is available
z<- optimal.params(data[i,], log.kda=l)
Neutral[i,] <- as.matrix(z)
}
colnames(Neutral) <- c(x="Theta", y="m")
Neutral <- cbind(Neut, Neutral)
return(Neutral)
}}
#Every sample is is to sparse to create Neutral parameters for
#I need to do every station instead.
#Can't use itegrated depth because that does not give exact number of individuals
#Station test will create a new dataframe with all depth samples added
#This creates a single station sample that contains all samples added over that station
Stationtest<- function(data) { #Data must have depth in first row, and a column STATION written in all caps
SL <- (unique(data[,"STATION"]))
centiStation <- matrix(0,length(SL),ncol(data))
for(i in 1:length(SL)){
Station <- toString(SL[i])
datas <- data[which(data$STATION==Station),]
centi<- colSums(datas[,4:74])
print(centi)
centiStation[i,] <- as.matrix(centiStation[i,]+centi)
}
return(centiStation)}
#centiStation <- Stationtest(DIphyto)#Diphyto is a data frame made for depth integration from the loopdepthinteg.R script
#Build
CleanupTetame <- function(tetame, cutoff){
J <- tetame[,"J"]
S <- tetame[,"S"]
Theta <- as.numeric(rep(0, nrow(tetame)))
m     <- as.numeric(rep(0, nrow(tetame)))
Theta2<- as.numeric(rep(0, nrow(tetame)))
m2     <- c( as.numeric(rep(0, nrow(tetame))))
Station <- tetame[,"station"]
depth <- tetame[, "depth..m."]
for (i in 1:nrow(tetame)) {
theta1 <- tetame[1, "Theta"]
theta2 <- tetame[i, "Theta2"]
if (theta1 < theta2 && theta1<cutoff) {
Theta[i] <- theta1
m[i] <- tetame[i, "m"]
} else
if(theta2< theta1 & theta2<cutoff){
Theta[i] <- theta2
m[i] <- tetame[i, "m2"]
} else
if(theta1==theta2 & theta1<cutoff) {
Theta[i] <- theta1
m[i] <- tetame[i, "m"]
} else
if (theta1 & theta2 >cutoff) {
Theta[i] <- theta1
m[i] <- tetame[i, "m"]
Theta2[i] <- theta2
m2[i] <- tetame[i, "m2"]}
}
cbind(Station, depth, S, J, Theta, m, Theta2, m2)
}
NeutralTest(CleanTetame2, centitest2, rep=1000)
NeutralTest <- function(data, data2, rep) #data & data2 must have the same number of rows for this to work.
#data & data2 must have only abundances of organisms for each sample, nothing else.
{ startt= Sys.time()
P <- as.numeric(rep(0, nrow(data)))
ci <- as.numeric(rep(0, nrow(data)))
reps <- c(1:rep)
Hlist <- as.numeric(rep(0, nrow(data)))
Ho <- apply(data2, 1, function(x) (x/sum(x))*(-log(x/sum(x)))) #Shannon Wiener Diversity precursor
Ho <- colSums(Ho, na.rm=T)
Neutral_MeanH <- as.numeric(rep(0, nrow(data)))
Station <- data[, "Station"]
depth <- data[, "depth"]
for (i in 1:nrow(data)) {
S <- data[i, "S"]
Theta <- data[i, "Theta"]
m <- data[i, "m"]
J <- data[i, "J"]
Hlist <- as.numeric(rep(0, rep))
#while (starttime+10 > Sys.time()) {
starttime=Sys.time()
for(z in 1:rep) {
while (z<101 & starttime+300>Sys.time()) {
print(z)
#Nsim <- matrix(nrow=rep, ncol=S)
repeat{
Nsim <- rand.neutral(J, Theta)
s    <- length(Nsim)
if (s==S) break
}
#Nsim[z,] <- as.numeric(Ns)
H <- (Nsim/sum(Nsim))*(-log(Nsim/sum(Nsim)))
H<- sum(H, na.rm=T) #Shannon Wiener Diversity Index
Hlist[z] <- H
}
Neutral_MeanH[i] <- mean(Hlist)
p<- t.test(Hlist, mu=Ho[i])
ci[i]<- list(p[4])
P[i] <- as.numeric(p[3]) # Ho: mu=3
endt=Sys.time()
diff<- endt-startt
#print(P[i])
print(paste("station:", Station[i], "depth:", depth[i], "p-value:", P[i], "CI:", ci[i], "H observed:", Ho[i], "mean H:", Neutral_MeanH[i], "calc.time:", Sys.time()))
}
NTest <-  data.frame(Station, depth, P, Neutral_MeanH, Ho)
return(NTest)
}
)
NeutralTest(CleanTetame2, centitest2, rep=1000)
NeutralTest <- function(data, data2, rep) #data & data2 must have the same number of rows for this to work.
#data & data2 must have only abundances of organisms for each sample, nothing else.
{ startt=Sys.time()
P <- as.numeric(rep(0, nrow(data)))
ci <- as.numeric(rep(0, nrow(data)))
reps <- c(1:rep)
Hlist <- as.numeric(rep(0, nrow(data)))
Ho <- apply(data2, 1, function(x) (x/sum(x))*(-log(x/sum(x)))) #Shannon Wiener Diversity precursor
Ho <- colSums(Ho, na.rm=T)
Neutral_MeanH <- as.numeric(rep(0, nrow(data)))
Station <- data[, "Station"]
depth <- data[, "depth"]
for (i in 1:nrow(data)) {
S <- data[i, "S"]
Theta <- data[i, "Theta"]
m <- data[i, "m"]
J <- data[i, "J"]
Hlist <- as.numeric(rep(0, rep))
#while (starttime+10 > Sys.time()) {
starttime=Sys.time()
for(z in 1:rep) {
#while (z<101 & starttime+300>Sys.time()) {
#Nsim <- matrix(nrow=rep, ncol=S)
repeat{
Nsim <- rand.neutral(J, Theta)
s    <- length(Nsim)
if (s==S) break
}
#Nsim[z,] <- as.numeric(Ns)
H <- (Nsim/sum(Nsim))*(-log(Nsim/sum(Nsim)))
H<- sum(H, na.rm=T) #Shannon Wiener Diversity Index
Hlist[z] <- H
starttime=Sys.time()
}
Neutral_MeanH[i] <- mean(Hlist)
p<- t.test(Hlist, mu=Ho[i])
ci[i]<- list(p[4])
P[i] <- as.numeric(p[3]) # Ho: mu=3
endt=Sys.time()
diff<- endt-startt
#print(P[i])
print(paste("station:", Station[i], "depth:", depth[i], "p-value:", P[i], "CI:", ci[i], "H observed:", Ho[i], "mean H:", Neutral_MeanH[i], "calc.time:", Sys.time()))
}
NTest <-  data.frame(Station, depth, P, Neutral_MeanH, Ho)
return(NTest)
}
NeutralTest(CleanTetame2, centitest2, rep=1000)
NeutralTest(CleanTetame2, centitest2, rep=1000, 3600)
source('~/GitHub/KuroshioR/RDiversityIndicesCalc.R')
NeutralTest(CleanTetame2, centitest2, rep=1000, 3600)
source('~/GitHub/KuroshioR/RDiversityIndicesCalc.R')
source('~/GitHub/KuroshioR/RDiversityIndicesCalc.R')
NeutralTest(CleanTetame2, centitest2, rep=1000, 3600)
NeutralTest(CleanTetame2, centitest2, rep=1000, t.lim=3600)
NeutralTest <- function(data, data2, rep, t.lim) #data & data2 must have the same number of rows for this to work.
#data & data2 must have only abundances of organisms for each sample, nothing else.
{ startt= Sys.time()
P <- as.numeric(rep(0, nrow(data)))
ci <- as.numeric(rep(0, nrow(data)))
reps <- c(1:rep)
Hlist <- as.numeric(rep(0, nrow(data)))
Ho <- apply(data2, 1, function(x) (x/sum(x))*(-log(x/sum(x)))) #Shannon Wiener Diversity precursor
Ho <- colSums(Ho, na.rm=T)
Neutral_MeanH <- as.numeric(rep(0, nrow(data)))
Station <- data[, "Station"]
depth <- data[, "depth"]
Precise <- as.vector(rep("NA", nrow(data)))
for (i in 1:nrow(data)) {
S <- data[i, "S"]
Theta <- data[i, "Theta"]
m <- data[i, "m"]
J <- data[i, "J"]
Hlist <- as.numeric(rep(0, rep))
ptm <- proc.time()
for(z in 1:rep) {
print(z)
elapsed <- ptm-proc.time()
if (elapsed[3]< -t.lim) {
exact=1
repeat{
Nsim <- rand.neutral(J, Theta)
s    <- length(Nsim)
if (s>S-1 || s<S+1) break
}
} else {
repeat{
exact=0
Nsim <- rand.neutral(J, Theta)
s    <- length(Nsim)
if (s==S) break
}}
H <- (Nsim/sum(Nsim))*(-log(Nsim/sum(Nsim)))
H<- sum(H, na.rm=T) #Shannon Wiener Diversity Index
Hlist[z] <- H
}
if(exact==1) {
Precise[i] <- "FALSE"
} else {
Precise[i] <- "TRUE"
}
Neutral_MeanH[i] <- mean(Hlist)
p<- t.test(Hlist, mu=Ho[i])
ci[i]<- list(p[4])
P[i] <- as.numeric(p[3]) # Ho: mu=3
time= ptm-proc.time()
diff<- endt-startt
print(paste("station:", Station[i], "depth:", depth[i], "p-value:", P[i], "CI:", ci[i], "H observed:", Ho[i], "mean H:", Neutral_MeanH[i], "calc.time:", time, "precise?:", Precise[i]))
}
NTest <-  data.frame(Station, depth, P, Neutral_MeanH, Ho, Precise)
return(NTest)
}
NeutralTest(CleanTetame2, centitest2, rep=1000, t.lim=3600)
NeutralTest(CleanTetame, centitest, rep=1000, t.lim=3600)
source('~/GitHub/KuroshioR/NeutralTestLinux.R')
folder <- getwd() #sets directory as an object/path to folder that holds multiple .csv files
file_list <- list.files(path=folder, pattern="*.csv") # create list of all .csv files in folder
# read in each .csv file in file_list and create a data frame with the same name as the .csv file
for (i in 1:length(file_list)){
assign(file_list[i],
read.csv(paste(folder, '/', file_list[i], sep=''))
)
}
folder <- getwd() #sets directory as an object/path to folder that holds multiple .csv files
file_list <- list.files(path=folder, pattern="*.csv") # create list of all .csv files in folder
# read in each .csv file in file_list and create a data frame with the same name as the .csv file
for (i in 1:length(file_list)){
assign(file_list[i],
read.csv(paste(folder, '/', file_list[i], sep=''))
}
folder <- getwd() #sets directory as an object/path to folder that holds multiple .csv files
file_list <- list.files(path=folder, pattern="*.csv") # create list of all .csv files in folder
# read in each .csv file in file_list and create a data frame with the same name as the .csv file
for (i in 1:length(file_list)){
assign(file_list[i], read.csv(paste(folder, '/', file_list[i], sep='')))
}
folder <- getwd() #sets directory as an object/path to folder that holds multiple .csv files
file_list <- list.files(path=folder, pattern="*.csv") # create list of all .csv files in folder
# read in each .csv file in file_list and create a data frame with the same name as the .csv file
for (i in 1:length(file_list)){
read.csv(paste(folder, '/', file_list[i], sep=''))
}
file_list
length(file_list)
file_list[1]
past(folder, '/', file_list[1], sep='')
paste(folder, '/', file_list[1], sep='')
read.csv(paste(folder, '/', file_list[1], sep=''))
source('~/GitHub/KuroshioR/RDiversityIndicesCalc.R')
NeutralTest <- function(data, data2, rep, t.lim, Theta_Ewens=FALSE) #data & data2 must have the same number of rows for this to work.
#data & data2 must have only abundances of organisms for each sample, nothing else.
{
startt= Sys.time()
P <- as.numeric(rep(0, nrow(data)))
ci <- as.numeric(rep(0, nrow(data)))
reps <- c(1:rep)
Hlist <- as.numeric(rep(0, nrow(data)))
Ho <- apply(data2, 1, function(x) (x/sum(x))*(-log(x/sum(x)))) #Shannon Wiener Diversity precursor
Ho <- colSums(Ho, na.rm=T)
Neutral_MeanH <- as.numeric(rep(0, nrow(data)))
Station <- data[, "Station"]
depth <- data[, "depth"]
Precise <- as.vector(rep("NA", nrow(data)))
for (i in 1:nrow(data)) {
if (Theta_Ewens==TRUE) {
Theta <- data[i, "Theta_Ewens"]
} else
{Theta<- data[i, "Theta"]
}
S <- data[i, "S"]
m <- data[i, "m"]
J <- data[i, "J"]
Hlist <- as.numeric(rep(0, rep))
ptm <- proc.time()
for(z in 1:rep) {
elapsed <- ptm-proc.time()
if (elapsed[3]< -t.lim) {
exact=1
repeat{
Nsim <- rand.neutral(J, Theta)
s    <- length(Nsim)
if (s>S-1 || s<S+1) break
}
} else {
repeat{
exact=0
Nsim <- rand.neutral(J, Theta)
s    <- length(Nsim)
if (s==S) break
}}
H <- (Nsim/sum(Nsim))*(-log(Nsim/sum(Nsim)))
H<- sum(H, na.rm=T) #Shannon Wiener Diversity Index
Hlist[z] <- H
}
if(exact==1) {
Precise[i] <- "FALSE"
} else {
Precise[i] <- "TRUE"
}
Neutral_MeanH[i] <- mean(Hlist)
p<- t.test(Hlist, mu=Ho[i])
ci[i]<- list(p[4])
P[i] <- as.numeric(p[3]) # Ho: mu=3
time= ptm-proc.time()
diff<- endt-startt
print(paste("station:", Station[i], "depth:", depth[i], "p-value:", P[i], "CI:", ci[i], "H observed:", Ho[i], "mean H:", Neutral_MeanH[i], "calc.time:", time, "precise?:", Precise[i]))
}
NTest <-  data.frame(Station, depth, P, Neutral_MeanH, Ho, Precise)
return(NTest)
}
NeutralTest <- function(data, data2, rep, t.lim, Theta_Ewens=FALSE) #data & data2 must have the same number of rows for this to work.
#data & data2 must have only abundances of organisms for each sample, nothing else.
{
startt= Sys.time()
P <- as.numeric(rep(0, nrow(data)))
ci <- as.numeric(rep(0, nrow(data)))
reps <- c(1:rep)
Hlist <- as.numeric(rep(0, nrow(data)))
Ho <- apply(data2, 1, function(x) (x/sum(x))*(-log(x/sum(x)))) #Shannon Wiener Diversity precursor
Ho <- colSums(Ho, na.rm=T)
Neutral_MeanH <- as.numeric(rep(0, nrow(data)))
Station <- data[, "Station"]
depth <- data[, "depth"]
Precise <- as.vector(rep("NA", nrow(data)))
for (i in 1:nrow(data)) {
if (Theta_Ewens==TRUE) {
Theta <- data[i, "Theta_Ewens"]
} else
{Theta<- data[i, "Theta"]
}
S <- data[i, "S"]
m <- data[i, "m"]
J <- data[i, "J"]
Hlist <- as.numeric(rep(0, rep))
ptm <- proc.time()
for(z in 1:rep) {
elapsed <- ptm-proc.time()
if (elapsed[3]< -t.lim) {
exact=1
repeat{
Nsim <- rand.neutral(J, Theta)
s    <- length(Nsim)
if (s>S-1 || s<S+1) break
}
} else {
repeat{
exact=0
Nsim <- rand.neutral(J, Theta)
s    <- length(Nsim)
if (s==S) break
}}
H <- (Nsim/sum(Nsim))*(-log(Nsim/sum(Nsim)))
H<- sum(H, na.rm=T) #Shannon Wiener Diversity Index
Hlist[z] <- H
}
if(exact==1) {
Precise[i] <- "FALSE"
} else {
Precise[i] <- "TRUE"
}
Neutral_MeanH[i] <- mean(Hlist)
p<- t.test(Hlist, mu=Ho[i])
ci[i]<- list(p[4])
P[i] <- as.numeric(p[3]) # Ho: mu=3
time= ptm-proc.time()
diff<- endt-startt
print(paste("station:", Station[i], "depth:", depth[i], "p-value:", P[i], "CI:", ci[i], "H observed:", Ho[i], "mean H:", Neutral_MeanH[i], "calc.time:", time, "precise?:", Precise[i]))
}
NTest <-  data.frame(Station, depth, P, Neutral_MeanH, Ho, Precise)
return(NTest)
}
load("~/GitHub/KuroshioR/.RData")
version()
